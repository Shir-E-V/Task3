#include "iostream"
#include "vector"
#include "string"

using namespace std;

// Функция prime_numbers для заданной пары чисел возвращает
// вектор (динамический массив) простых чисел, находящихся
// на промежутке [min_num, max_num].
vector<int> prime_numbers(int min_num, int max_num);

// Функция enter_number осуществляет проверку
// корректности введенного пользователем числа.
int enter_number();

// Функция print_numbers выводит на экран полученный
// вектор (динамический массив) простых чисел или сообщает
// о том, что таких чисел нет.
void print_numbers(vector<int>& vec);


int main()
{
	setlocale(LC_ALL, "Russian");

	int min_num, max_num;

	cout << "Введите два числа. Первое число минимальное, второе число максимальное. \n";

	// Вводим числа и проверяем их корректность
	min_num = enter_number();
	max_num = enter_number();

	while (min_num > max_num)
	{
		cout << "Введите числа еще раз. Первое число не должно превышать второе. \n";
		min_num = enter_number();
		max_num = enter_number();
	}

	// Создаем вектор для простых чисел на промежутке [min_num, max_num]
	// и заполняем его
	vector <int> prime_numbers_vector;

	prime_numbers_vector = prime_numbers(min_num, max_num);

	cout << "\nПолучили промежуток: [" << min_num << ", " << max_num << "].\n";

	// Выводим результат на экран
	print_numbers(prime_numbers_vector);

	system("pause");
}


// Функция prime_numbers для заданной пары чисел возвращает
// вектор (динамический массив) простых чисел, находящихся
// на промежутке [min_num, max_num].
vector<int> prime_numbers(int min_num, int max_num)
{
	// Создаем вектор для чисел
	vector <int> vec;

	// Если оба полученных на вход числа равны 1 или меньше 1, то
	// функция возвращает пустой вектор, простых чисел на промежутке нет.
	// Простое число - натуральное число, имеющее ровно два
	// различных натуральных делителя. 1 - не простое число.

	if ((min_num <= 1) && (max_num <= 1)) return vec;
	else
	{
		// Иначе, применим алгоритм "Решето Эратосфена"
		// Заполним вектор числами от 2 до max_num
		for (int i = 0; i < max_num - 1; i++)
		{
			vec.push_back(i + 2);
		}

		// Пусть переменная t = 2 (первое простое число). Первый элемент
		// вектора равен 2. Перебираем элементы вектора, начиная
		// со второго (индекс a = 1), и удаляем из вектора все числа,
		// кратные t = 2. Обновляем значение t. t равно элементу с индексом a. Увеличиваем a на 1. 
		// Далее перебираем элементы вектора, начиная с третьего (индекс a = 2),
		// и удаляем из вектора все числа, кратные t. Снова обновляем значение t.
		// t равно элементу с индексом a. Увеличиваем a на 1. И так далее, пока a не совпадет с размером вектора..
		// В итоге получим вектор, состоящий из простых чисел от 2 до max_num.

		int t = 2;
		int a = 1;

		while (a < vec.size())
		{
			for (int i = a; i < vec.size(); i++)
			{
				if (vec.at(i) % t == 0)
				{
					vec.erase(vec.begin() + i);
				}
			}
			t = vec.at(a);
			a++;
		}

		// Если самый большой элемент вектора меньше, чем наименьшее число
		// рассматриваемого промежутка min_num, то очистим вектор.
		// Простых чисел на промежутке нет.
		if (vec.at(vec.size() - 1) < min_num) vec.clear();
		else
		{
			// Иначе, пока первый элемент вектора меньше min_num
			// будем удалять его из вектора.
			while (vec.at(0) < min_num)
			{
				vec.erase(vec.begin());
			}
		}

	}
	return vec; // Возвращаем полученный вектор с простыми числами
	// на заданном промежутке
}


// Функция enter_number осуществляет проверку
// корректности введенного пользователем числа.
int enter_number()
{
	string str_number; // В эту переменную будем считывать число в виде строки
	int number; // В эту переменную будет помещено число, преобразованное из строки

	int flag = 0;
	do
	{
		try
		{
			cin >> str_number; // Считаем число в виде строки
			number = stoi(str_number); // Конвертируем строку в число int
			flag = 1;
		}
		catch (invalid_argument)
		{
			cout << "Число введено неверно. Введите число еще раз:\n";
		}
		catch (out_of_range)
		{
			cout << "Число слишком большое. Введите число еще раз:\n";
		}
		catch (...)
		{
			cout << "Ошибка! Введите число еще раз:\n";
		}

	} while (flag == 0);

	return number; // Возвращаем корректное число
}


// Функция print_numbers выводит на экран
// вектор (динамический массив) из полученных
// простых чисел или сообщает о том, что таких чисел нет.
void print_numbers(vector<int>& vec)
{
	if (vec.empty()) // Вектор пустой.
		cout << "На данном промежутке нет простых чисел.\n";
	else
	{
		cout << "Простые числа на данном промежутке:\n[";
		for (int i = 0; i < vec.size() - 1; i++)
		{
			cout << vec.at(i) << ", ";
		}
		cout << vec.at(vec.size() - 1) << "].\n\n";
	}
}
